{
    "docs": [
        {
            "location": "/", 
            "text": "These codes simulate the time-evolution of a polaron state.  Currently they are limited to 1D only.  The classical response of the lattice is treated as a dielectric material being polarised by the electron density.  The electron density is found by forming a tight-binding Hamiltonian for the lattice, with the site energy modified by the (back-reaction) polarisation field of the lattice. \n\n\nThe (classical) lattice degree of freedom and (quantum) electron degree of freedom are time evolved by direct evaluation of the exponential equations of motion.  Initial work has been done to add surface-hopping between different potential energy surfaces. \n\n\n\n\nInstallation\n\n\nThese codes require Julia \n0.6 . They are structured as a full Julia package, but are not yet registered with the central METADATA package repository. \n\n\nTo install, type the following at the Julia REPL:\n\n\njulia\n Pkg.clone(\ngit://github.com/Jarvist/TheDancer.jl.git\n)\n\n\n\n\n\n\nCommunity guidelines\n\n\nContributions to the code (extending that which is calculated), or additional physical systems / examples, are very welcome. \n\n\nIf you have questions about the software, scientific questions, or find errors, please create a \nGitHub issue\n. \n\n\nIf you find this package (or snippets, such as the entered and tested free-energy expressions) useful for your work, please cite the paper as and when we publish something!", 
            "title": "Home"
        }, 
        {
            "location": "/#installation", 
            "text": "These codes require Julia  0.6 . They are structured as a full Julia package, but are not yet registered with the central METADATA package repository.   To install, type the following at the Julia REPL:  julia  Pkg.clone( git://github.com/Jarvist/TheDancer.jl.git )", 
            "title": "Installation"
        }, 
        {
            "location": "/#community-guidelines", 
            "text": "Contributions to the code (extending that which is calculated), or additional physical systems / examples, are very welcome.   If you have questions about the software, scientific questions, or find errors, please create a  GitHub issue .   If you find this package (or snippets, such as the entered and tested free-energy expressions) useful for your work, please cite the paper as and when we publish something!", 
            "title": "Community guidelines"
        }, 
        {
            "location": "/functions/", 
            "text": "Functions provided\n\n\n\n\nModels\n\n\nmodelJ(theta) \n\n\n\n\n#\n\n\nTheDancer.randH\n \n \nMethod\n.\n\n\nrandH(SiteEnergy, Edisorder, Jdisorder, modelJ, N)\n\n\n\n\nLiberated from 'Sturm': https://github.com/jarvist/Teclo/blob/master/Sturm.jl \n\n\nGenerate a random tridiagonal TightBinding Hamiltonian, in a form suitable for the Sturm sequence\n\n\nGiven:\n\n\n\n\nSiteEnergy - scalar eV; reference for site energy of monomer\n\n\nEdisorder - scalar eV ; amount of Gaussian / normal energetic disorder, for trace of Hamiltonian\n\n\nJdisorder - scalar eV\n\n\nmodelJ(theta) - function, takes degrees, returns eV ; model for the transfer integral (e.g. E=(J0\ncos(thetas\npi/180)).^2 )\n\n\nN - integar ; size of diagonal of Hamiltonian\n\n\n\n\nsource\n\n\n#\n\n\nTheDancer.nondispersive_wavepacket\n \n \nMethod\n.\n\n\nShamelessly copied from Wikipedia: https://en.wikipedia.org/wiki/Wave_packet \n\n\nsource\n\n\nplanewave(\u03bb)\n\n\n\n\nprepare_model()\n\n\n\n\n\n\nPropagators\n\n\n#\n\n\nTheDancer.SiteEnergyFromDipoles\n \n \nMethod\n.\n\n\nCalculate site-energies for sites, from potential generated by dipoles at other sites.\n\n\nsource\n\n\n#\n\n\nTheDancer.DipolesFromDensity\n \n \nMethod\n.\n\n\nStep-forwards in time, and allow dipoles (dielectric response) of sites to respond to electron density.\n\n\nsource\n\n\nAdiabaticPropagation(dipoles,E,dampening)\n\n\n\n\nUnitaryPropagation(dipoles,E,psi,dt,dampening;slices::Int=1)\n\n\n\n\n#\n\n\nTheDancer.TimeDependentPropagation\n \n \nMethod\n.\n\n\nTimeDependentPropagation(psi,H,dt;slices::Int=1,decompose::Bool=false,verbose::Bool=false)\n\n\n\n\nPropagate Wavefunction directly with Hamiltonian and time dependent Schrodinger equation.\n\n\nPsi (N) is the wavefunction; H the Hamiltonian (NxN); dt the length of time to propgate along; slices is how many slices to decompose the Unitary operator into; verbose sets the display of info on the unitary nature of U, whether U*U' ~= I.  \n\n\nsource\n\n\n#\n\n\nTheDancer.TimeDependentPropagation\n \n \nMethod\n.\n\n\nPropagate wavefunction directly from eigenergy, and time dependent Schrodinger equation.\n\n\nsource\n\n\n\n\nSimulations\n\n\n#\n\n\nTheDancer.Plot_S_psi_density_dipoles\n \n \nMethod\n.\n\n\nWrapper function to pretty-print and plot (UnicodePlots) relevant items of interest.\n\n\nsource\n\n\noverlap(psia,psib)\n\n\n\n\n#\n\n\nTheDancer.Decompose_H\n \n \nMethod\n.\n\n\nDecompose Hamiltonian into Diagonal/S/PE and Off-diag/J/KE elements\n\n\nsource\n\n\n#\n\n\nTheDancer.Plot_H\n \n \nMethod\n.\n\n\nPlot spectrum of (H)amiltonian, other useful info.\n\n\nsource\n\n\noutputpng()\n\n\n\n\nSCFthenUnitary(dampening, SCFcycles, Unitarycycles; PNG::Bool=false)", 
            "title": "Functions provided"
        }, 
        {
            "location": "/functions/#functions-provided", 
            "text": "", 
            "title": "Functions provided"
        }, 
        {
            "location": "/functions/#models", 
            "text": "modelJ(theta)   #  TheDancer.randH     Method .  randH(SiteEnergy, Edisorder, Jdisorder, modelJ, N)  Liberated from 'Sturm': https://github.com/jarvist/Teclo/blob/master/Sturm.jl   Generate a random tridiagonal TightBinding Hamiltonian, in a form suitable for the Sturm sequence  Given:   SiteEnergy - scalar eV; reference for site energy of monomer  Edisorder - scalar eV ; amount of Gaussian / normal energetic disorder, for trace of Hamiltonian  Jdisorder - scalar eV  modelJ(theta) - function, takes degrees, returns eV ; model for the transfer integral (e.g. E=(J0 cos(thetas pi/180)).^2 )  N - integar ; size of diagonal of Hamiltonian   source  #  TheDancer.nondispersive_wavepacket     Method .  Shamelessly copied from Wikipedia: https://en.wikipedia.org/wiki/Wave_packet   source  planewave(\u03bb)  prepare_model()", 
            "title": "Models"
        }, 
        {
            "location": "/functions/#propagators", 
            "text": "#  TheDancer.SiteEnergyFromDipoles     Method .  Calculate site-energies for sites, from potential generated by dipoles at other sites.  source  #  TheDancer.DipolesFromDensity     Method .  Step-forwards in time, and allow dipoles (dielectric response) of sites to respond to electron density.  source  AdiabaticPropagation(dipoles,E,dampening)  UnitaryPropagation(dipoles,E,psi,dt,dampening;slices::Int=1)  #  TheDancer.TimeDependentPropagation     Method .  TimeDependentPropagation(psi,H,dt;slices::Int=1,decompose::Bool=false,verbose::Bool=false)  Propagate Wavefunction directly with Hamiltonian and time dependent Schrodinger equation.  Psi (N) is the wavefunction; H the Hamiltonian (NxN); dt the length of time to propgate along; slices is how many slices to decompose the Unitary operator into; verbose sets the display of info on the unitary nature of U, whether U*U' ~= I.    source  #  TheDancer.TimeDependentPropagation     Method .  Propagate wavefunction directly from eigenergy, and time dependent Schrodinger equation.  source", 
            "title": "Propagators"
        }, 
        {
            "location": "/functions/#simulations", 
            "text": "#  TheDancer.Plot_S_psi_density_dipoles     Method .  Wrapper function to pretty-print and plot (UnicodePlots) relevant items of interest.  source  overlap(psia,psib)  #  TheDancer.Decompose_H     Method .  Decompose Hamiltonian into Diagonal/S/PE and Off-diag/J/KE elements  source  #  TheDancer.Plot_H     Method .  Plot spectrum of (H)amiltonian, other useful info.  source  outputpng()  SCFthenUnitary(dampening, SCFcycles, Unitarycycles; PNG::Bool=false)", 
            "title": "Simulations"
        }
    ]
}